{"CC3D: Get ExtraAttribute": {"prefix": "Get ExtraAttribute", "body": "\nACCESSOR_NAME.get(CELL->extraAttribPtr)->ATTRIBUTE_COMPONENT\n\n\n", "description": "Get ExtraAttribute"}, "CC3D: Automaton": {"prefix": "Automaton", "body": "#include <CompuCell3D/Automaton/Automaton.h>\n\n", "description": "Automaton"}, "CC3D: Boundary Strategy": {"prefix": "Boundary Strategy", "body": "#include <CompuCell3D/Boundary/BoundaryStrategy.h>\n\n", "description": "Boundary Strategy"}, "CC3D: Boundary Type Definitions": {"prefix": "Boundary Type Definitions", "body": "#include <CompuCell3D/Boundary/BoundaryTypeDefinitions.h>\n\n", "description": "Boundary Type Definitions"}, "CC3D: Cell/Cluster Inventory": {"prefix": "Cell/Cluster Inventory", "body": "#include <CompuCell3D/Potts3D/CellInventory.h>\n\n", "description": "Cell/Cluster Inventory"}, "CC3D: Field3D": {"prefix": "Field3D", "body": "#include <CompuCell3D/Field3D/Field3D.h>\n#include <CompuCell3D/Field3D/WatchableField3D.h>\n\n", "description": "Field3D"}, "CC3D: NumericalUtilis": {"prefix": "NumericalUtilis", "body": "#include <PublicUtilities/NumericalUtils.h>\n\n\n\n", "description": "NumericalUtilis"}, "CC3D: Plugin Files": {"prefix": "Plugin Files", "body": "#include <CompuCell3D/plugins/PLUGIN_NAME/PLUGIN_FILE.h>\n\n", "description": "Plugin Files"}, "CC3D: Point3D/Dim3D": {"prefix": "Point3D/Dim3D", "body": "#include <CompuCell3D/Field3D/Point3D.h>\n#include <CompuCell3D/Field3D/Dim3D.h>\n\n", "description": "Point3D/Dim3D"}, "CC3D: Potts3D": {"prefix": "Potts3D", "body": "#include <CompuCell3D/Potts3D/Potts3D.h>\n\n", "description": "Potts3D"}, "CC3D: Simulator": {"prefix": "Simulator", "body": "#include <CompuCell3D/Simulator.h>\n\n", "description": "Simulator"}, "CC3D: StringUtilis": {"prefix": "StringUtilis", "body": "#include <PublicUtilities/StringUtils.h>\n\n", "description": "StringUtilis"}, "CC3D: Vector3": {"prefix": "Vector3", "body": "#include <PublicUtilities/Vector3.h>\n\n", "description": "Vector3"}, "CC3D: Preload Plugin": {"prefix": "Preload Plugin", "body": "//This code is usually called from   init function      \nbool pluginAlreadyRegisteredFlag;\nPlugin *plugin=Simulator::pluginManager.get(\"PLUGIN_NAME\",&pluginAlreadyRegisteredFlag); //this will load PLUGIN_NAME plugin if it is not already loaded\nif(!pluginAlreadyRegisteredFlag)\n    plugin->init(simulator);\n\n", "description": "Preload Plugin"}, "CC3D: All Cells": {"prefix": "All Cells", "body": "CellInventory::cellInventoryIterator cInvItr;\nCellG * cell=0;\n// std::set<NeighborSurfaceData > * neighborData;\n\nfor(cInvItr=cellInventoryPtr->cellInventoryBegin() ; cInvItr !=cellInventoryPtr->cellInventoryEnd() ;++cInvItr )\n{\n    cell=cellInventoryPtr->getCell(cInvItr);\n    //Put your code here\n    cerr<<\"cell id=\"<<cell->id<<endl;\n}\n\n", "description": "All Cells"}, "CC3D: Compartments of a Cluster": {"prefix": "Compartments of a Cluster", "body": "CC3DCellList compartments = potts->getCellInventory().getClusterInventory().getClusterCells(CELL->clusterId);\nfor (int i =0 ; i< compartments.size() ; ++i){\n    cerr<<\"compartment id=\"<<compartments[i]->id<<endl; \n}\n\n", "description": "Compartments of a Cluster"}, "CC3D: Pixel Neighbors": {"prefix": "Pixel Neighbors", "body": "int maxNeighborIndexLocal=boundaryStrategy->getMaxNeighborIndexFromNeighborOrder(neighborOrder); // this line usually sits in the init or extra init function\nNeighbor neighbor;\nCellG * nCell;\nWatchableField3D<CellG *> *fieldG =(WatchableField3D<CellG *> *) potts->getCellFieldG(); // you may store WatchableField3D<CellG *> *fieldG as a class member\n\nPoint3D px;\n\nfor(unsigned int nIdx=0 ; nIdx <= maxNeighborIndexLocal ; ++nIdx ){\n    neighbor=boundaryStrategy->getNeighborDirect(const_cast<Point3D&>(px),nIdx);\n    if(!neighbor.distance){\n        //if distance is 0 then the neighbor returned is invalid\n        continue;\n    }\n    nCell=fieldG->get(neighbor.pt);\n\n    if (!nCell) {\n        cerr<<\"neighbor pixel cell id=\"<<nCell->id<<endl;\n    }\n        \n}\n\n\n", "description": "Pixel Neighbors"}, "CC3D: Find Attribute": {"prefix": "Find Attribute", "body": "bool flag=_xmlData->findAttribute(\"ATTR_NAME\");\n\n", "description": "Find Attribute"}, "CC3D: Find Element": {"prefix": "Find Element", "body": "bool flag=_xmlData->findElement(\"ELEMENT_NAME\");\n\n", "description": "Find Element"}, "CC3D: Get Attribute As Bool": {"prefix": "Get Attribute As Bool", "body": "bool val=_xmlData->getAttributeAsBool(\"ATTR_NAME\");\n\n", "description": "Get Attribute As Bool"}, "CC3D: Get Attribute As Double": {"prefix": "Get Attribute As Double", "body": "double val=_xmlData->getAttributeAsDouble(\"ATTR_NAME\");\n\n", "description": "Get Attribute As Double"}, "CC3D: Get Attribute As Int": {"prefix": "Get Attribute As Int", "body": "int val=_xmlData->getAttributeAsInt(\"ATTR_NAME\");\n\n", "description": "Get Attribute As Int"}, "CC3D: Get Attribute As Short": {"prefix": "Get Attribute As Short", "body": "short val=_xmlData->getAttributeAsShort(\"ATTR_NAME\");\n\n", "description": "Get Attribute As Short"}, "CC3D: Get Attribute As Text": {"prefix": "Get Attribute As Text", "body": "std::string val=_xmlData->getAttribute(\"ATTR_NAME\");\n\n", "description": "Get Attribute As Text"}, "CC3D: Get Attribute As UInt": {"prefix": "Get Attribute As UInt", "body": "unsigned int val=_xmlData->getAttributeAsUInt(\"ATTR_NAME\");\n\n", "description": "Get Attribute As UInt"}, "CC3D: Get Attribute As UShort": {"prefix": "Get Attribute As UShort", "body": "unsigned short val=_xmlData->getAttributeAsUShort(\"ATTR_NAME\");\n\n", "description": "Get Attribute As UShort"}, "CC3D: Get Element": {"prefix": "Get Element", "body": "CC3DXMLElement *elem=_xmlData->getFirstElement(\"ELEMENT_NAME\");\n\n", "description": "Get Element"}, "CC3D: Get Element As Bool": {"prefix": "Get Element As Bool", "body": "bool val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getBool();\n\n", "description": "Get Element As Bool"}, "CC3D: Get Element As Double": {"prefix": "Get Element As Double", "body": "double val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getDouble();\n\n", "description": "Get Element As Double"}, "CC3D: Get Element As Int": {"prefix": "Get Element As Int", "body": "int val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getInt();\n\n", "description": "Get Element As Int"}, "CC3D: Get Element As Short": {"prefix": "Get Element As Short", "body": "short val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getShort();\n\n", "description": "Get Element As Short"}, "CC3D: Get Element As Text": {"prefix": "Get Element As Text", "body": "std::string val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getText();\n\n", "description": "Get Element As Text"}, "CC3D: Get Element As UInt": {"prefix": "Get Element As UInt", "body": "unsigned int val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getUInt();\n\n", "description": "Get Element As UInt"}, "CC3D: Get Element As UShort": {"prefix": "Get Element As UShort", "body": "unsigned short val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getUShort();\n\n", "description": "Get Element As UShort"}, "CC3D: Process List of Elements": {"prefix": "Process List of Elements", "body": "CC3DXMLElementList elemVec=_xmlData->getElements(\"ELEMENT_NAME\");\nfor (int i = 0 ; i<elemVec.size(); ++i){\n    //Put your code here\n}\n\n\n\n", "description": "Process List of Elements"}}