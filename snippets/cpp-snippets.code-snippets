{"CC3D: Get Molecule Dens. By Index": {"prefix": "Get Molecule Dens. By Index", "body": "# Make sure AdhesionFlex plugin is loaded\n# accessing adhesion molecule density using its index\n# molecules are indexed in the same order they are listed in the xml file\nself.adhesionFlexPlugin.getAdhesionMoleculeDensity(cell,0)\n\n", "description": "Get Molecule Dens. By Index"}, "CC3D: Get Molecule Dens. By Index (Medium)": {"prefix": "Get Molecule Dens. By Index (Medium)", "body": "# Make sure AdhesionFlex plugin is loaded\n# accessing adhesion molecule density for Medium using its index\n# molecules are indexed in the same order they are listed in the xml file\nself.getMediumAdhesionMoleculeDensityByIndex(0)\n\n", "description": "Get Molecule Dens. By Index (Medium)"}, "CC3D: Get Molecule Dens. By Name": {"prefix": "Get Molecule Dens. By Name", "body": "# Make sure AdhesionFlex plugin is loaded\n# accessing adhesion molecule density using its name\nself.adhesionFlexPlugin.getAdhesionMoleculeDensity(cell, \"NCad\")\n\n", "description": "Get Molecule Dens. By Name"}, "CC3D: Get Molecule Dens. By Name (Medium)": {"prefix": "Get Molecule Dens. By Name (Medium)", "body": "# Make sure AdhesionFlex plugin is loaded\n# accessing adhesion molecule density for Medium using its name\nself.adhesionFlexPlugin.getMediumAdhesionMoleculeDensity(\"NCad\")\n\n", "description": "Get Molecule Dens. By Name (Medium)"}, "CC3D: Set Molecule Dens. By Index": {"prefix": "Set Molecule Dens. By Index", "body": "# Make sure AdhesionFlex plugin is loaded\n# setting adhesion molecule density using its index\n# molecules are indexed in the same order they are listed in the xml file\nself.adhesionFlexPlugin.setAdhesionMoleculeDensity(cell, 0, 11.2)\n\n", "description": "Set Molecule Dens. By Index"}, "CC3D: Set Molecule Dens. By Index (Medium)": {"prefix": "Set Molecule Dens. By Index (Medium)", "body": "# Make sure AdhesionFlex plugin is loaded\n# setting adhesion molecule density for Medium using its index\n# molecules are indexed in the same order they are listed in the xml file\nself.adhesionFlexPlugin.setMediumAdhesionMoleculeDensityByIndex(0, 11.2)\n\n", "description": "Set Molecule Dens. By Index (Medium)"}, "CC3D: Set Molecule Dens. By Name": {"prefix": "Set Molecule Dens. By Name", "body": "# Make sure AdhesionFlex plugin is loaded\n# setting adhesion molecule density using its name\nself.adhesionFlexPlugin.setAdhesionMoleculeDensity(cell, \"NCad\", 11.2)\n\n", "description": "Set Molecule Dens. By Name"}, "CC3D: Set Molecule Dens. By Name (Medium)": {"prefix": "Set Molecule Dens. By Name (Medium)", "body": "# Make sure AdhesionFlex plugin is loaded\n# setting adhesion molecule density for Medium using its name\nself.adhesionFlexPlugin.setMediumAdhesionMoleculeDensity(\"NCad\", 11.2)\n\n", "description": "Set Molecule Dens. By Name (Medium)"}, "CC3D: Get ExtraAttribute": {"prefix": "Get ExtraAttribute", "body": "\nACCESSOR_NAME.get(CELL->extraAttribPtr)->ATTRIBUTE_COMPONENT\n\n\n", "description": "Get ExtraAttribute"}, "CC3D: Apply Force To Cell": {"prefix": "Apply Force To Cell", "body": "# Make sure ExternalPotential plugin is loaded\ncell.lambdaVecX = -0.5  # force component pointing along X axis - towards positive X's\ncell.lambdaVecY = 0.5  # force component pointing along Y axis - towards negative Y's\ncell.lambdaVecZ = 0.0  # force component pointing along Z axis\n\n", "description": "Apply Force To Cell"}, "CC3D: Change Lambda Motility": {"prefix": "Change Lambda Motility", "body": "cell.lambdaMotility = 15.0\n\n", "description": "Change Lambda Motility"}, "CC3D: Change Lambda Surface": {"prefix": "Change Lambda Surface", "body": "cell.lambdaSurface = 2.0\n\n", "description": "Change Lambda Surface"}, "CC3D: Change Lambda Volume": {"prefix": "Change Lambda Volume", "body": "cell.lambdaVolume = 2.0\n\n", "description": "Change Lambda Volume"}, "CC3D: Change Target Surface": {"prefix": "Change Target Surface", "body": "cell.targetSurface = 20.0\n\n", "description": "Change Target Surface"}, "CC3D: Change Target Volume": {"prefix": "Change Target Volume", "body": "cell.targetVolume = 25\n\n", "description": "Change Target Volume"}, "CC3D: Connectivity Constraint By Cell Id": {"prefix": "Connectivity Constraint By Cell Id", "body": "# Make sure ConnectivityLocalFlex plugin is loaded\n# Argument Order: cell, strength\nself.connectivityLocalFlexPlugin.setConnectivityStrength(cell, 10000000)\n\n", "description": "Connectivity Constraint By Cell Id"}, "CC3D: Length Constraint By Cell Id": {"prefix": "Length Constraint By Cell Id", "body": "# Make sure LengthConstraint plugin is loaded\n# Argument Order: cell , lambdaLength, targetLength\nself.lengthConstraint.setLengthConstraintData(cell, 20, 20)\n\n", "description": "Length Constraint By Cell Id"}, "CC3D: Create Cell": {"prefix": "Create Cell", "body": "# size of cell will be 3x3x1\nself.cell_field[10:12, 10:12, 0] = self.new_cell(self.TYPENAME)\n\n", "description": "Create Cell"}, "CC3D: Create Cell (detailed)": {"prefix": "Create Cell (detailed)", "body": "x = X_POSITION\ny = Y_POSITION\nsize = SIZE\ncell = self.new_cell(self.TYPENAME)\n# size of cell will be SIZExSIZEx1\nself.cell_field[x:x + size - 1, y:y + size - 1, 0] = cell\n\n", "description": "Create Cell (detailed)"}, "CC3D: Delete Cell": {"prefix": "Delete Cell", "body": "self.delete_cell(cell)\n\n", "description": "Delete Cell"}, "CC3D: Fetch Cell By Id": {"prefix": "Fetch Cell By Id", "body": "cell = self.fetch_cell_by_id(CELL_ID)\n\n", "description": "Fetch Cell By Id"}, "CC3D: Get Cell At a Pixel": {"prefix": "Get Cell At a Pixel", "body": "cell = self.cell_field[10, 11, 0]\n\n", "description": "Get Cell At a Pixel"}, "CC3D: Merge Cell": {"prefix": "Merge Cell", "body": "# Turns all voxels of SOURCE_CELL into voxels of DESTINATION_CELL\n# This function will merge the cells regardless of the distance between them.\n# It won't update the DESTINATION_CELL target volume.\n# Use with care.\nself.merge_cells(SOURCE_CELL, DESTINATION_CELL)\n\n", "description": "Merge Cell"}, "CC3D: Move Cell": {"prefix": "Move Cell", "body": "# Shifting entire cell by a 'shiftVector'\n# Requires PixelTracker Plugin         \nshift_vector = [20, 20, 0]\nself.move_cell(cell, shift_vector)\n\n", "description": "Move Cell"}, "CC3D: Get Field Max Value": {"prefix": "Get Field Max Value", "body": "maxValue = field.max()\n\n", "description": "Get Field Max Value"}, "CC3D: Get Field Min Value": {"prefix": "Get Field Min Value", "body": "minValue = field.min()\n\n", "description": "Get Field Min Value"}, "CC3D: Get Field Reference": {"prefix": "Get Field Reference", "body": "field = self.field.FIELD_NAME\n\n", "description": "Get Field Reference"}, "CC3D: Get Field Value": {"prefix": "Get Field Value", "body": "value = field[10, 10, 0]\n\n", "description": "Get Field Value"}, "CC3D: Modification (aka secretion)": {"prefix": "Modification (aka secretion)", "body": "field = self.field.FIELD_NAME\nif field:\n    for i, j, k in self.every_pixel():\n        field[i, j, k] = i * j\n\n", "description": "Modification (aka secretion)"}, "CC3D: Set Field Value": {"prefix": "Set Field Value", "body": "field[10, 10, 0] = 1.02\n\n", "description": "Set Field Value"}, "CC3D: Write To Disk": {"prefix": "Write To Disk", "body": "\nfield = self.field.FIELD_NAME\noutput_dir = self.output_dir\n\n\nif output_dir is not None:\n    output_path = Path(output_dir).joinpath(FILE_NAME)\n    # create folder to store data\n    output_path.parent.mkdir(parents=True, exist_ok=True)\n\n    with open(output_path, 'w') as file_handle:\n        for i, j, k in self.every_pixel():\n            file_handle.write(\"%d\\t%d\\t%d\\t%f\\n\" % (i, j, k, field[i, j, k]))\n\n", "description": "Write To Disk"}, "CC3D: By Cell Id (Define)": {"prefix": "By Cell Id (Define)", "body": "# Make sure Chemotaxis Plugin is loaded\n# defining chemotaxis properties of individual cell 'cell'\ncd = self.chemotaxisPlugin.addChemotaxisData(cell, \"FIELDNAME\")\ncd.setLambda(20.0)\n# If assigning chemotaxis only towards one or more specific cell types, then use the following,\n# where the list references the cell types (shown here for type names 'type_name_1' and 'type_name_2')\n# cd.assignChemotactTowardsVectorTypes([self.cell_type.type_name_1, self.cell_type.type_name_2])\n\n", "description": "By Cell Id (Define)"}, "CC3D: By Cell Id (Modify)": {"prefix": "By Cell Id (Modify)", "body": "# Make sure Chemotaxis Plugin is loaded\n# modifying chemotaxis properties of individual cell 'cell'\ncd = self.chemotaxisPlugin.getChemotaxisData(cell, \"FIELDNAME\")\nif cd:\n    l = cd.getLambda() - 3\n    cd.setLambda(l)\n\n", "description": "By Cell Id (Modify)"}, "CC3D: Distance  Between Cells": {"prefix": "Distance  Between Cells", "body": "vec = self.distance_between_cells(CELL1, CELL2)\n\n", "description": "Distance  Between Cells"}, "CC3D: Distance  Between Cells (Invariant)": {"prefix": "Distance  Between Cells (Invariant)", "body": "vec = self.invariant_distance_between_cells(CELL1, CELL2)\n\n", "description": "Distance  Between Cells (Invariant)"}, "CC3D: Distance Vector Between Cells": {"prefix": "Distance Vector Between Cells", "body": "vec = self.distance_between_cells(CELL1, CELL2)\n\n", "description": "Distance Vector Between Cells"}, "CC3D: Distance Vector Between Cells (Invariant)": {"prefix": "Distance Vector Between Cells (Invariant)", "body": "vec = self.invariant_distance_vector_between_cells(CELL1, CELL2)\n\n", "description": "Distance Vector Between Cells (Invariant)"}, "CC3D: Distance Vector Between Points": {"prefix": "Distance Vector Between Points", "body": "vec = self.distance(p1=[10, 10, 0], p2=[11, 11, 0])\n\n", "description": "Distance Vector Between Points"}, "CC3D: Distance Vector Between Points (Invariant)": {"prefix": "Distance Vector Between Points (Invariant)", "body": "vec = self.unconditional_invariant_distance_vector(p1=[10, 10, 0], p2=[11, 11, 0])\n\n", "description": "Distance Vector Between Points (Invariant)"}, "CC3D: Distance Vector Between Points (Invariant, Integer)": {"prefix": "Distance Vector Between Points (Invariant, Integer)", "body": "vec = self.invariant_distance_vector_integer(p1=[10, 10, 0], p2=[11, 11, 0])\n\n", "description": "Distance Vector Between Points (Invariant, Integer)"}, "CC3D: Hex: Cartesian 2 Hex": {"prefix": "Hex: Cartesian 2 Hex", "body": "coords = self.cartesian_2_hex(coords=POINT3D)  # retutns Coordinates<double>\n\n", "description": "Hex: Cartesian 2 Hex"}, "CC3D: Hex: Hex 2 Cartesian": {"prefix": "Hex: Hex 2 Cartesian", "body": "# returns Point3D\npt = self.hex_2_cartesian(coords=COORDS)\n\n", "description": "Hex: Hex 2 Cartesian"}, "CC3D: Numpy: Numpy Array To Point3D": {"prefix": "Numpy: Numpy Array To Point3D", "body": "pt = self.numpy_to_point_3d(PT_ARRAY)\n\n", "description": "Numpy: Numpy Array To Point3D"}, "CC3D: Numpy: Point3D To Numpy Array": {"prefix": "Numpy: Point3D To Numpy Array", "body": "ptArray = self.point_3d_to_numpy(PT)\n\n", "description": "Numpy: Point3D To Numpy Array"}, "CC3D: Vector Norm": {"prefix": "Vector Norm", "body": "norm = self.vector_norm(VECTOR)\n\n", "description": "Vector Norm"}, "CC3D: Add New Elastic Link": {"prefix": "Add New Elastic Link", "body": "# Make sure Elasticity plugin is loaded and Local option is on\n# arguments are cell1, cell2, lambdaElasticLink,targetLinkLength\nself.elasticityTrackerPlugin.addNewElasticLink(cell1, cell2, 200.0, 6.0)\n\n", "description": "Add New Elastic Link"}, "CC3D: Modify Existing Links": {"prefix": "Modify Existing Links", "body": "# Make sure Elasticity plugin is loaded and Local option is on\nelasticity_data_list = self.get_elasticity_data_list(cell)\nfor elasticity_data in elasticity_data_list:  # visiting all elastic links of 'cell'\n\n    target_length = elasticity_data.targetLength\n    elasticity_data.targetLength = 6.0\n    elasticity_data.lambdaLength = 200.0\n    elasticity_neighbor = elasticity_data.neighborAddress\n\n    # now we set up elastic link data stored in neighboring cell\n    neighbor_elasticity_data = None\n    neighbor_elasticity_data_list = self.get_elasticity_data_list(elasticity_neighbor)\n    for neighbor_elasticity_data_tmp in neighbor_elasticity_data_list:\n        if not self.are_cells_different(neighbor_elasticity_data_tmp.neighborAddress, cell):\n            neighbor_elasticity_data = neighbor_elasticity_data_tmp\n            break\n\n    if neighbor_elasticity_data is None:\n        print (\"None Type returned.\"\n               \" Problems with ElasticityDataNeighbors initialization or sets of elasticityNeighborData are corrupted\")\n        sys.exit()\n    neighbor_elasticity_data.targetLength = 6.0\n    neighbor_elasticity_data.lambdaLength = 200.0\n\n", "description": "Modify Existing Links"}, "CC3D: Remove Elastic Link": {"prefix": "Remove Elastic Link", "body": "# Make sure Elasticity plugin is loaded and Local option is on\n# arguments are cell1, cell2,\nself.elasticityTrackerPlugin.removeElasticityPair(cell1, cell2, 200.0, 6.0)\n\n", "description": "Remove Elastic Link"}, "CC3D: Scalar Field Cell Level - Clear (step fcn.)": {"prefix": "Scalar Field Cell Level - Clear (step fcn.)", "body": "field = self.field.SCALAR_CL_FIELD.clear()\n\n", "description": "Scalar Field Cell Level - Clear (step fcn.)"}, "CC3D: Scalar Field Cell Level - Create (__init__ fcn.)": {"prefix": "Scalar Field Cell Level - Create (__init__ fcn.)", "body": "self.create_scalar_field_cell_level_py(\"FIELD_NAME_SCL\")\n\n", "description": "Scalar Field Cell Level - Create (__init__ fcn.)"}, "CC3D: Scalar Field Cell Level - Example": {"prefix": "Scalar Field Cell Level - Example", "body": "from random import random\nfield = self.field.SCALAR_CL_FIELD\n\n# clear field\nfield.clear()\n\nfor cell in self.cell_list:\n    field[cell] = cell, cell.id * random()\n\n", "description": "Scalar Field Cell Level - Example"}, "CC3D: Scalar Field Cell Level - Write (step fcn.)": {"prefix": "Scalar Field Cell Level - Write (step fcn.)", "body": "field = self.field.SCALAR_CL_FIELD\nfield[cell] = FLOAT_VALUE\n\n", "description": "Scalar Field Cell Level - Write (step fcn.)"}, "CC3D: Scalar Field Pixel Level - Clear (step fcn.)": {"prefix": "Scalar Field Pixel Level - Clear (step fcn.)", "body": "field = self.field.SCALAR_FIELD\nfield[:, :, :] = 0.0\n\n", "description": "Scalar Field Pixel Level - Clear (step fcn.)"}, "CC3D: Scalar Field Pixel Level - Create (__init__ fcn.)": {"prefix": "Scalar Field Pixel Level - Create (__init__ fcn.)", "body": "self.create_scalar_field_py(\"FIELD_NAME_S\")\n\n", "description": "Scalar Field Pixel Level - Create (__init__ fcn.)"}, "CC3D: Scalar Field Pixel Level - Example": {"prefix": "Scalar Field Pixel Level - Example", "body": "import math\nfield = self.field.SCALAR_FIELD\n\n# clear field\nfield[:, :, :] = 0.0\n\nfor x, y, z in self.every_pixel():\n    if not mcs % 20:\n        field[x, y, z] = x * y\n\n    else:\n        field[x, y, z] = math.sin(x * y)\n\n", "description": "Scalar Field Pixel Level - Example"}, "CC3D: Scalar Field Pixel Level - Write (step fcn.)": {"prefix": "Scalar Field Pixel Level - Write (step fcn.)", "body": "field = self.field.SCALAR_FIELD\nfield[10, 11, 0] = FLOAT_VALUE\n\n", "description": "Scalar Field Pixel Level - Write (step fcn.)"}, "CC3D: Vector Field Cell Level - Clear (step fcn.)": {"prefix": "Vector Field Cell Level - Clear (step fcn.)", "body": "field = self.field.VECTOR_CL_FIELD.clear()\n\n", "description": "Vector Field Cell Level - Clear (step fcn.)"}, "CC3D: Vector Field Cell Level - Create (__init__ fcn.)": {"prefix": "Vector Field Cell Level - Create (__init__ fcn.)", "body": "self.create_vector_field_cell_level_py(\"FIELD_NAME_VCL\")\n\n", "description": "Vector Field Cell Level - Create (__init__ fcn.)"}, "CC3D: Vector Field Cell Level - Example": {"prefix": "Vector Field Cell Level - Example", "body": "from random import random\nfield = self.field.VECTOR_CL_FIELD\n\nfield.clear()\nfor cell in self.cell_list:\n    if cell.type == 1:\n        field[cell] = [cell.id * random(), cell.id * random(), 0]\n        vec = field[cell]\n        vec *= 2.0\n        field[cell] = vec\n\n", "description": "Vector Field Cell Level - Example"}, "CC3D: Vector Field Cell Level - Write (step fcn.)": {"prefix": "Vector Field Cell Level - Write (step fcn.)", "body": "field = self.field.VECTOR_CL_FIELD\nfield[cell] = [VEC_X, VEC_Y, VEC_Z]\n\n", "description": "Vector Field Cell Level - Write (step fcn.)"}, "CC3D: Vector Field Pixel Level - Clear (step fcn.)": {"prefix": "Vector Field Pixel Level - Clear (step fcn.)", "body": "field = self.field.VECTOR_FIELD\n# clear vector field\nfield[:, :, :, :] = 0.0\n\n", "description": "Vector Field Pixel Level - Clear (step fcn.)"}, "CC3D: Vector Field Pixel Level - Create (__init__ fcn.)": {"prefix": "Vector Field Pixel Level - Create (__init__ fcn.)", "body": "self.create_vector_field_py(\"FIELD_NAME_V\")\n\n", "description": "Vector Field Pixel Level - Create (__init__ fcn.)"}, "CC3D: Vector Field Pixel Level - Example": {"prefix": "Vector Field Pixel Level - Example", "body": "field = self.field.VECTOR_FIELD\n# clear vector field\nfield[:, :, :, :] = 0.0\n\nfor x in range(0, self.dim.x, 5):\n    for y in range(0, self.dim.y, 5):\n        for z in range(self.dim.z):\n            field[x, y, z] = [x * random(), y * random(), z * random()]\n\n", "description": "Vector Field Pixel Level - Example"}, "CC3D: Vector Field Pixel Level - Write (step fcn.)": {"prefix": "Vector Field Pixel Level - Write (step fcn.)", "body": "field = self.field.VECTOR_FIELD\nfield[x, y, z] = [VEC_X, VEC_Y, VEC_Z]\n\n", "description": "Vector Field Pixel Level - Write (step fcn.)"}, "CC3D: Track Scalar Cell Attribute (__init__)": {"prefix": "Track Scalar Cell Attribute (__init__)", "body": "self.track_cell_level_scalar_attribute(field_name='FIELD_NAME', attribute_name='ATTR_NAME')\n\n", "description": "Track Scalar Cell Attribute (__init__)"}, "CC3D: Track Scalar Cell Attribute Custom Function (__init__)": {"prefix": "Track Scalar Cell Attribute Custom Function (__init__)", "body": "self.track_cell_level_scalar_attribute(field_name='FIELD_NAME', attribute_name='ATTR_NAME',\n                                       function=lambda attr_val: attr_val ** 3)\n\n", "description": "Track Scalar Cell Attribute Custom Function (__init__)"}, "CC3D: Track Vector Cell Attribute (__init__)": {"prefix": "Track Vector Cell Attribute (__init__)", "body": "self.track_cell_level_vector_attribute(field_name='mcs_vec', attribute_name='mcs_vec')\n\n", "description": "Track Vector Cell Attribute (__init__)"}, "CC3D: Track Vector Cell Attribute Custom Function (__init__)": {"prefix": "Track Vector Cell Attribute Custom Function (__init__)", "body": "self.track_cell_level_vector_attribute(field_name='FIELD_NAME', attribute_name='VEC_NAME',\n                                       function=lambda vec: [vec[0] * random(), vec[1] * random(), vec[2] * random()])\n\n", "description": "Track Vector Cell Attribute Custom Function (__init__)"}, "CC3D: Link inventory: Get anchor assicated with a cell and anchor id": {"prefix": "Link inventory: Get anchor assicated with a cell and anchor id", "body": "# Make sure FocalPointPlacticity plugin is loaded\nlink = self.get_fpp_anchor_by_cell_and_id(cell, anchor_id)\n\n", "description": "Link inventory: Get anchor assicated with a cell and anchor id"}, "CC3D: Link inventory: Get internal link associated with two cells": {"prefix": "Link inventory: Get internal link associated with two cells", "body": "# Make sure FocalPointPlacticity plugin is loaded\nlink = self.get_fpp_internal_link_by_cells(cell1, cell2)\n\n", "description": "Link inventory: Get internal link associated with two cells"}, "CC3D: Link inventory: Get link associated with two cells": {"prefix": "Link inventory: Get link associated with two cells", "body": "# Make sure FocalPointPlacticity plugin is loaded\nlink = self.get_fpp_link_by_cells(cell1, cell2)\n\n", "description": "Link inventory: Get link associated with two cells"}, "CC3D: Link inventory: Get number of anchors": {"prefix": "Link inventory: Get number of anchors", "body": "# Make sure FocalPointPlacticity plugin is loaded\nna = self.get_number_of_fpp_anchors()\n\n", "description": "Link inventory: Get number of anchors"}, "CC3D: Link inventory: Get number of internal link junctions by type for a cell": {"prefix": "Link inventory: Get number of internal link junctions by type for a cell", "body": "# Make sure FocalPointPlacticity plugin is loaded\nnijt = self.get_number_of_fpp_internal_junctions_by_type(cell, attached_cell_type)\n\n", "description": "Link inventory: Get number of internal link junctions by type for a cell"}, "CC3D: Link inventory: Get number of internal links": {"prefix": "Link inventory: Get number of internal links", "body": "# Make sure FocalPointPlacticity plugin is loaded\nnil = self.get_number_of_fpp_internal_links()\n\n", "description": "Link inventory: Get number of internal links"}, "CC3D: Link inventory: Get number of link junctions by type for a cell": {"prefix": "Link inventory: Get number of link junctions by type for a cell", "body": "# Make sure FocalPointPlacticity plugin is loaded\nnjt = self.get_number_of_fpp_junctions_by_type(cell, attached_cell_type)\n\n", "description": "Link inventory: Get number of link junctions by type for a cell"}, "CC3D: Link inventory: Get number of links": {"prefix": "Link inventory: Get number of links", "body": "# Make sure FocalPointPlacticity plugin is loaded\nnl = self.get_number_of_fpp_links()\n\n", "description": "Link inventory: Get number of links"}, "CC3D: Link management: Create Anchor": {"prefix": "Link management: Create Anchor", "body": "# Make sure FocalPointPlacticity plugin is loaded\n# Arguments are cell: CellG lambda_distance: float, target_distance: float, max_distance: float\n# You can specify an anchor point with (float) keyword arguments \"x\", \"y\", \"z\" or with a (Point3D) keyword argument \"pt\"\n# link = self.new_fpp_anchor(cell, lambda_distance, target_distance, max_distance, x=0.0, y=1.0, z=2.0)\n# link = self.new_fpp_anchor(cell, lambda_distance, target_distance, max_distance, pt=Point3D(0, 1, 2))\n\n", "description": "Link management: Create Anchor"}, "CC3D: Link management: Create FPP Internal Link (Within Cluster)": {"prefix": "Link management: Create FPP Internal Link (Within Cluster)", "body": "# Make sure FocalPointPlacticity plugin is loaded\n# Arguments are:\n# initiator: CellG, initiated: CellG, lambda_distance: float, target_distance: float, max_distance: float\nlink = self.new_fpp_internal_link(initiator, initiated, lambda_distance, target_distance, max_distance)\n\n", "description": "Link management: Create FPP Internal Link (Within Cluster)"}, "CC3D: Link management: Create FPP Link": {"prefix": "Link management: Create FPP Link", "body": "# Make sure FocalPointPlacticity plugin is loaded\n# Arguments are:\n# initiator: CellG, initiated: CellG, lambda_distance: float, target_distance: float, max_distance: float\nlink = self.new_fpp_link(initiator, initiated, lambda_distance, target_distance, max_distance)\n\n", "description": "Link management: Create FPP Link"}, "CC3D: Link management: Delete FPP Link (any type)": {"prefix": "Link management: Delete FPP Link (any type)", "body": "self.delete_fpp_link(link)\n\n", "description": "Link management: Delete FPP Link (any type)"}, "CC3D: Link management: Delete FPP Links Attached to a Cell (any type)": {"prefix": "Link management: Delete FPP Links Attached to a Cell (any type)", "body": "# To select which types of links to remove, set any of the following keyword arguments to True\n#   Remove all links          : links\n#   Remove all internal links : internal_links\n#   Remove all anchors        : anchors\n# If none of these are specified, then all links of any type are removed\nself.remove_all_cell_fpp_links(cell)\n\n", "description": "Link management: Delete FPP Links Attached to a Cell (any type)"}, "CC3D: Link property: activation energy": {"prefix": "Link property: activation energy", "body": "# ae = link.getActivationEnergy()\n# link.setActivationEnergy(1.0)\n\n", "description": "Link property: activation energy"}, "CC3D: Link property: anchor id (anchor only)": {"prefix": "Link property: anchor id (anchor only)", "body": "aid = link.getAnchorId()\n\n", "description": "Link property: anchor id (anchor only)"}, "CC3D: Link property: anchor point (anchor only)": {"prefix": "Link property: anchor point (anchor only)", "body": "ap = link.getAnchorPoint()\nlink.setAnchorPoint([0.0, 1.0, 2.0])\n\n", "description": "Link property: anchor point (anchor only)"}, "CC3D: Link property: initialization step": {"prefix": "Link property: initialization step", "body": "# im = link.getInitMCS()\n\n", "description": "Link property: initialization step"}, "CC3D: Link property: lambda": {"prefix": "Link property: lambda", "body": "# ld = link.getLambdaDistance()\n# link.setLambdaDistance(1.0)\n\n", "description": "Link property: lambda"}, "CC3D: Link property: linked cell(s)": {"prefix": "Link property: linked cell(s)", "body": "# For regular and internal links, two cells are linked:\n# initiator_cell, initiated_cell = link.cellPair\n# For anchors, only one cell is linked:\n# linked_cell = link.cell\n\n", "description": "Link property: linked cell(s)"}, "CC3D: Link property: maximum distance": {"prefix": "Link property: maximum distance", "body": "# md = link.getMaxDistance()\n# link.setMaxDistance(1.0)\n\n", "description": "Link property: maximum distance"}, "CC3D: Link property: maximum number of junctions": {"prefix": "Link property: maximum number of junctions", "body": "# mnj = link.getMaxNumberOfJunctions()\n# link.setMaxNumberOfJunctions(1)\n\n", "description": "Link property: maximum number of junctions"}, "CC3D: Link property: neighbor order": {"prefix": "Link property: neighbor order", "body": "# no = link.getNeighborOrder()\n# link.setNeighborOrder(1)\n\n", "description": "Link property: neighbor order"}, "CC3D: Link property: target distance": {"prefix": "Link property: target distance", "body": "# td = link.getTargetDistance()\n# link.setTargetDistance(1.0)\n\n", "description": "Link property: target distance"}, "CC3D: Visit: All anchors attached to a cell": {"prefix": "Visit: All anchors attached to a cell", "body": "# Make sure FocalPointPlacticity plugin is loaded\n# Visit all anchors attached to a cell\nfor link in self.get_fpp_anchors_by_cell(cell):\n    # operations here\n\n", "description": "Visit: All anchors attached to a cell"}, "CC3D: Visit: All cells attached to a cell by a link": {"prefix": "Visit: All cells attached to a cell by a link", "body": "# Make sure FocalPointPlacticity plugin is loaded\n# Visit all cells attached to a cell by a link\nfor linked_cell in self.get_fpp_linked_cells(cell):\n    # operations here\n\n", "description": "Visit: All cells attached to a cell by a link"}, "CC3D: Visit: All cells attached to a cell by an internal link": {"prefix": "Visit: All cells attached to a cell by an internal link", "body": "# Make sure FocalPointPlacticity plugin is loaded\n# Visit all cells attached to a cell by an internal link\nfor linked_cell in self.get_fpp_internal_linked_cells(cell):\n    # operations here\n\n", "description": "Visit: All cells attached to a cell by an internal link"}, "CC3D: Visit: All internal links attached to a cell": {"prefix": "Visit: All internal links attached to a cell", "body": "# Make sure FocalPointPlacticity plugin is loaded\n# Visit all internal links attached to a cell in a cluster\nfor link in self.get_fpp_internal_links_by_cell(cell):\n    # operations here\n\n", "description": "Visit: All internal links attached to a cell"}, "CC3D: Visit: All links attached to a cell": {"prefix": "Visit: All links attached to a cell", "body": "# Make sure FocalPointPlacticity plugin is loaded\n# Visit all links attached to a cell\nfor link in self.get_fpp_links_by_cell(cell):\n    # operations here\n\n", "description": "Visit: All links attached to a cell"}, "CC3D: Automaton": {"prefix": "Automaton", "body": "#include <CompuCell3D/Automaton/Automaton.h>\n\n", "description": "Automaton"}, "CC3D: Boundary Strategy": {"prefix": "Boundary Strategy", "body": "#include <CompuCell3D/Boundary/BoundaryStrategy.h>\n\n", "description": "Boundary Strategy"}, "CC3D: Boundary Type Definitions": {"prefix": "Boundary Type Definitions", "body": "#include <CompuCell3D/Boundary/BoundaryTypeDefinitions.h>\n\n", "description": "Boundary Type Definitions"}, "CC3D: Cell/Cluster Inventory": {"prefix": "Cell/Cluster Inventory", "body": "#include <CompuCell3D/Potts3D/CellInventory.h>\n\n", "description": "Cell/Cluster Inventory"}, "CC3D: Field3D": {"prefix": "Field3D", "body": "#include <CompuCell3D/Field3D/Field3D.h>\n#include <CompuCell3D/Field3D/WatchableField3D.h>\n\n", "description": "Field3D"}, "CC3D: NumericalUtilis": {"prefix": "NumericalUtilis", "body": "#include <PublicUtilities/NumericalUtils.h>\n\n\n\n", "description": "NumericalUtilis"}, "CC3D: Plugin Files": {"prefix": "Plugin Files", "body": "#include <CompuCell3D/plugins/PLUGIN_NAME/PLUGIN_FILE.h>\n\n", "description": "Plugin Files"}, "CC3D: Point3D/Dim3D": {"prefix": "Point3D/Dim3D", "body": "#include <CompuCell3D/Field3D/Point3D.h>\n#include <CompuCell3D/Field3D/Dim3D.h>\n\n", "description": "Point3D/Dim3D"}, "CC3D: Potts3D": {"prefix": "Potts3D", "body": "#include <CompuCell3D/Potts3D/Potts3D.h>\n\n", "description": "Potts3D"}, "CC3D: Simulator": {"prefix": "Simulator", "body": "#include <CompuCell3D/Simulator.h>\n\n", "description": "Simulator"}, "CC3D: StringUtilis": {"prefix": "StringUtilis", "body": "#include <PublicUtilities/StringUtils.h>\n\n", "description": "StringUtilis"}, "CC3D: Vector3": {"prefix": "Vector3", "body": "#include <PublicUtilities/Vector3.h>\n\n", "description": "Vector3"}, "CC3D: Information": {"prefix": "Information", "body": "# Make sure MomentOfInertia plugin is loaded\nprint(\"cell.iXX=\", cell.iXX, \" cell.iYY=\", cell.iYY, \" cell.iXY=\", cell.iXY)\n# simiilarly we can get other components of intertia tensor\n\n", "description": "Information"}, "CC3D: Semiaxes": {"prefix": "Semiaxes", "body": "# Make sure MomentOfInertia plugin is loaded\naxes = self.momentOfInertiaPlugin.getSemiaxes(cell)\nprint(\"minorAxis=\", axes[0], \" majorAxis=\", axes[2], \" medianAxis=\", axes[1])\n\n", "description": "Semiaxes"}, "CC3D: Add a MaBoSS simulation to a cell": {"prefix": "Add a MaBoSS simulation to a cell", "body": "# Input MaBoSS network description in file 'bnd_file' or string 'bnd_str'\n# Input MaBoSS configuration in file 'cfg_file' or string 'cfg_str'\n# If using strings, enclose entire network/configuration in a multiline string\n# Input\nself.add_maboss_to_cell(cell=cell,\n                        model_name=model_name,\n                        bnd_file=bnd_file,\n                        bnd_str=bnd_str,\n                        cfg_file=cfg_file,\n                        cfg_str=cfg_str,\n                        time_step=1.0,\n                        time_tick=1.0,\n                        discrete_time=False,\n                        seed=0)\n\n", "description": "Add a MaBoSS simulation to a cell"}, "CC3D: Copy a MaBoSS network state": {"prefix": "Copy a MaBoSS network state", "body": "# mm_from and mm_to is are MaBoSS simulations\nmm_to.loadNetworkState(mm_from.getNetworkState())\n\n\n", "description": "Copy a MaBoSS network state"}, "CC3D: Create a MaBoSS simulation": {"prefix": "Create a MaBoSS simulation", "body": "# Input MaBoSS network description in file 'bnd_file' or string 'bnd_str'\n# Input MaBoSS configuration in file 'cfg_file' or string 'cfg_str'\n# If using strings, enclose entire network/configuration in a multiline string\n# Input\nfrom cc3d.core import MaBoSSCC3D\nmm = MaBoSSCC3D.maboss_model(model_name=model_name,\n                             bnd_file=bnd_file,\n                             bnd_str=bnd_str,\n                             cfg_file=cfg_file,\n                             cfg_str=cfg_str,\n                             time_step=1.0,\n                             time_tick=1.0,\n                             discrete_time=False,\n                             seed=0)\n\n", "description": "Create a MaBoSS simulation"}, "CC3D: Delete a MaBoSS model attached to a cell": {"prefix": "Delete a MaBoSS model attached to a cell", "body": "# 'model_name' contains the alias of the particular model to get e.g., self.add_maboss_to_cell(model_name=model_name, ...)\nself.delete_maboss_from_cell(cell=cell, model_name=model_name)\n\n", "description": "Delete a MaBoSS model attached to a cell"}, "CC3D: Get a MaBoSS network node": {"prefix": "Get a MaBoSS network node", "body": "# 'MyModel' is the alias of the particular model to get e.g., self.add_maboss_to_cell(model_name='MyModel', ...)\n# 'MyNode' is the name of the node in the MaBoSS network\nnode = cell.maboss.MyModel['MyNode']\n\n", "description": "Get a MaBoSS network node"}, "CC3D: Get a MaBoSS simulation attached to a cell": {"prefix": "Get a MaBoSS simulation attached to a cell", "body": "# 'MyModel' is the alias of the particular model to get e.g., self.add_maboss_to_cell(model_name='MyModel', ...)\nmm = cell.maboss.MyModel\n\n", "description": "Get a MaBoSS simulation attached to a cell"}, "CC3D: Get/set a MaBoSS external variable": {"prefix": "Get/set a MaBoSS external variable", "body": "# mm is a MaBoSS simulation\n# myVar is declared as 'myVar' in the MaBoSS specification\nmm_myVar = mm.network.symbol_table['myVar']\n\n", "description": "Get/set a MaBoSS external variable"}, "CC3D: Get/set a MaBoSS network node property": {"prefix": "Get/set a MaBoSS network node property", "body": "# node is a MaBoSS node\nnode_description: str = node.description  # Description; read-only\nnode_is_input: bool = node.is_input  # Input node flag; read-only\nnode_is_internal: bool = node.is_internal  # Internal node flag\nnode_is_reference: bool = node.is_reference  # Reference node flag\nnode_istate: bool = node.istate  # Initial state\nnode_rate_down: float = node.rate_down  # Current rate down; read-only\nnode_rate_up: float = node.rate_up  # Current rate up; read-only\nnode_ref_state: bool = node.ref_state  # Reference state\nnode_state: bool = node.state  # Current state\n\n", "description": "Get/set a MaBoSS network node property"}, "CC3D: Get/set a MaBoSS simulation property": {"prefix": "Get/set a MaBoSS simulation property", "body": "# mm is a MaBoSS simulation\nmm_time: float = mm.time  # Current simulation time; read-only\nmm_step_size: float = mm.step_size  # Step size\nmm_time_tick: float = mm.run_config.time_tick  # Time tick\nmm_discrete_time: bool = mm.run_config.discrete_time  # Continuous/discrete flag\nmm_seed: int = mm.run_config.seed  # Random generator seed\n\n", "description": "Get/set a MaBoSS simulation property"}, "CC3D: Step all attached MaBoSS models": {"prefix": "Step all attached MaBoSS models", "body": "self.timestep_maboss()\n\n", "description": "Step all attached MaBoSS models"}, "CC3D: 1. Clone Attributes Parent -> Child": {"prefix": "1. Clone Attributes Parent -> Child", "body": "self.clone_parent_2_child()\n\n", "description": "1. Clone Attributes Parent -> Child"}, "CC3D: 1. Clone Cluster Attributes Parent -> Child": {"prefix": "1. Clone Cluster Attributes Parent -> Child", "body": "self.clone_parent_cluster_2_child_cluster()\n\n", "description": "1. Clone Cluster Attributes Parent -> Child"}, "CC3D: 2. Compact updateAttributes": {"prefix": "2. Compact updateAttributes", "body": "self.parent_cell.targetVolume /= 2.0  # reducing parent target volume\nself.clone_parent_2_child()\n\n", "description": "2. Compact updateAttributes"}, "CC3D: 2. Compact updateAttributes for clusters": {"prefix": "2. Compact updateAttributes for clusters", "body": "# we first redice target volum of the cluster of parent cell\ncompartment_list_parent = self.get_cluster_cells(self.parent_cell.clusterId)\nfor i in range(compartment_list_parent.size()):\n    compartment_list_parent[i].targetVolume /= 2.0\n\n# later we clone attributes from parent cluster to child cluster\nself.clone_parent_cluster_2_child_cluster()\n\n", "description": "2. Compact updateAttributes for clusters"}, "CC3D: Child on the Left of the Parent": {"prefix": "Child on the Left of the Parent", "body": "self.set_parent_child_position_flag(1)\n\n", "description": "Child on the Left of the Parent"}, "CC3D: Child on the Right of the Parent": {"prefix": "Child on the Right of the Parent", "body": "self.set_parent_child_position_flag(-1)\n\n", "description": "Child on the Right of the Parent"}, "CC3D: Child/Parent Random Relative Position": {"prefix": "Child/Parent Random Relative Position", "body": "self.set_parent_child_position_flag(0)\n\n", "description": "Child/Parent Random Relative Position"}, "CC3D: Clone Attributes (Flexible)": {"prefix": "Clone Attributes (Flexible)", "body": "self.clone_attributes(source_cell=self.parent_cell, target_cell=self.child_cell, no_clone_key_dict_list=[ATTRIB_1, ATTRIB_2])\n\n", "description": "Clone Attributes (Flexible)"}, "CC3D: Divide Cells Along Major Axis (Example)": {"prefix": "Divide Cells Along Major Axis (Example)", "body": "cells_to_divide = []\nfor cell in self.cell_list:\n    if cell.volume > 50:\n        cells_to_divide.append(cell)\n\nfor cell in cells_to_divide:\n    self.divide_cell_along_major_axis(cell)\n\n", "description": "Divide Cells Along Major Axis (Example)"}, "CC3D: Divide Cells Along Minor Axis (Example)": {"prefix": "Divide Cells Along Minor Axis (Example)", "body": "cells_to_divide = []\nfor cell in self.cell_list:\n    if cell.volume > 50:\n        cells_to_divide.append(cell)\n\nfor cell in cells_to_divide:\n    self.divide_cell_along_minor_axis(cell)\n\n", "description": "Divide Cells Along Minor Axis (Example)"}, "CC3D: Divide Cells Along Normal To Vector (Example)": {"prefix": "Divide Cells Along Normal To Vector (Example)", "body": "cells_to_divide = []\nfor cell in self.cell_list:\n    if cell.volume > 50:\n        cells_to_divide.append(cell)\n\nfor cell in cells_to_divide:\n    # dividing along Y axis - normal to (1,0,0)\n    self.divide_cell_orientation_vector_based(cell, 1, 0, 0)\n\n", "description": "Divide Cells Along Normal To Vector (Example)"}, "CC3D: Divide Cells Along Random Axis (Example)": {"prefix": "Divide Cells Along Random Axis (Example)", "body": "cells_to_divide = []\nfor cell in self.cell_list:\n    if cell.volume > 50:\n        cells_to_divide.append(cell)\n\nfor cell in cells_to_divide:\n    self.divide_cell_random_orientation(cell)\n\n", "description": "Divide Cells Along Random Axis (Example)"}, "CC3D: Divide Cluster Along Major Axis (Example)": {"prefix": "Divide Cluster Along Major Axis (Example)", "body": "mitosis_cluster_id_list = []\nfor compartment_list in self.cluster_list:\n\n    cluster_id = 0\n    cluster_volume = 0\n    for cell in CompartmentList(compartment_list):\n        cluster_volume += cell.volume\n        cluster_id = cell.clusterId\n\n    # condition under which cluster mitosis takes place\n    if cluster_volume > 250:\n        # instead of doing mitosis right away we store ids for clusters which should be divide.\n        # This avoids modifying cluster list while we iterate through it\n        mitosis_cluster_id_list.append(cluster_id)\n\nfor cluster_id in mitosis_cluster_id_list:\n    self.divide_cluster_along_major_axis(cluster_id)\n\n", "description": "Divide Cluster Along Major Axis (Example)"}, "CC3D: Divide Cluster Along Minor Axis (Example)": {"prefix": "Divide Cluster Along Minor Axis (Example)", "body": "mitosis_cluster_id_list = []\nfor compartment_list in self.clusterList:\n\n    cluster_id = 0\n    cluster_volume = 0\n    for cell in CompartmentList(compartment_list):\n        cluster_volume += cell.volume\n        cluster_id = cell.clusterId\n\n    # condition under which cluster mitosis takes place\n    if cluster_volume > 250:\n        # instead of doing mitosis right away we store ids for clusters which should be divide.\n        # This avoids modifying cluster list while we iterate through it\n        mitosis_cluster_id_list.append(cluster_id)\n\nfor cluster_id in mitosis_cluster_id_list:\n    self.divide_cluster_along_major_axis(cluster_id)\n\n", "description": "Divide Cluster Along Minor Axis (Example)"}, "CC3D: Divide Cluster Along Normal To Vector (Example)": {"prefix": "Divide Cluster Along Normal To Vector (Example)", "body": "mitosis_cluster_id_list = []\nfor compartment_list in self.clusterList:\n\n    cluster_id = 0\n    cluster_volume = 0\n    for cell in CompartmentList(compartment_list):\n        cluster_volume += cell.volume\n        cluster_id = cell.clusterId\n\n    # condition under which cluster mitosis takes place\n    if cluster_volume > 250:\n        # instead of doing mitosis right away we store ids for clusters which should be divide.\n        # This avoids modifying cluster list while we iterate through it\n        mitosis_cluster_id_list.append(cluster_id)\n\nfor cluster_id in mitosis_cluster_id_list:\n    self.divideClusterOrientationVectorBased(cluster_id, 1, 0, 0)\n\n", "description": "Divide Cluster Along Normal To Vector (Example)"}, "CC3D: Divide Cluster Along Random Axis (Example)": {"prefix": "Divide Cluster Along Random Axis (Example)", "body": "mitosis_cluster_id_list = []\nfor compartment_list in self.cluster_list:\n\n    cluster_id = 0\n    cluster_volume = 0\n    for cell in CompartmentList(compartment_list):\n        cluster_volume += cell.volume\n        cluster_id = cell.clusterId\n\n    # condition under which cluster mitosis takes place\n    if cluster_volume > 250:\n        # instead of doing mitosis right away we store ids for clusters which should be divide.\n        # This avoids modifying cluster list while we iterate through it\n        mitosis_cluster_id_list.append(cluster_id)\n\nfor cluster_id in mitosis_cluster_id_list:\n    self.divide_cluster_random_orientation(cluster_id)\n\n", "description": "Divide Cluster Along Random Axis (Example)"}, "CC3D: Preload Plugin": {"prefix": "Preload Plugin", "body": "//This code is usually called from   init function      \nbool pluginAlreadyRegisteredFlag;\nPlugin *plugin=Simulator::pluginManager.get(\"PLUGIN_NAME\",&pluginAlreadyRegisteredFlag); //this will load PLUGIN_NAME plugin if it is not already loaded\nif(!pluginAlreadyRegisteredFlag)\n    plugin->init(simulator);\n\n", "description": "Preload Plugin"}, "CC3D: 1. Run Parameter Scan Using Player (Windows)": {"prefix": "1. Run Parameter Scan Using Player (Windows)", "body": "# NOTE: THIS COMMAND IS SUPPOSED TO BE EXECUTED IN COMMAND LINE SHELL, NOT IN PYTHON!\nparamScan.bat - i < cc3dproject - file > --guiScan --maxNumberOfRuns=20[remaining command\nline\noptions\nused in compucell3d.bat or runScript.bat]\n\n", "description": "1. Run Parameter Scan Using Player (Windows)"}, "CC3D: 1. Run Parameter Scan With No GUI (Windows)": {"prefix": "1. Run Parameter Scan With No GUI (Windows)", "body": "# NOTE: THIS COMMAND IS SUPPOSED TO BE EXECUTED IN COMMAND LINE SHELL, NOT IN PYTHON!\nparamScan.bat - i < cc3d\nproject - file > --maxNumberOfRuns = 20[remaining\ncommand\nline\noptions\nused in compucell3d.bat or runScript.bat]\n\n", "description": "1. Run Parameter Scan With No GUI (Windows)"}, "CC3D: 2. Run Parameter Scan Using Player (Linux)": {"prefix": "2. Run Parameter Scan Using Player (Linux)", "body": "# NOTE: THIS COMMAND IS SUPPOSED TO BE EXECUTED IN COMMAND LINE SHELL, NOT IN PYTHON!\nparamScan.sh - i < cc3d\nproject - file > --guiScan - -maxNumberOfRuns = 20[remaining\ncommand\nline\noptions\nused in compucell3d.sh or runScript.sh]\n\n", "description": "2. Run Parameter Scan Using Player (Linux)"}, "CC3D: 2. Run Parameter Scan With No GUI (Linux)": {"prefix": "2. Run Parameter Scan With No GUI (Linux)", "body": "# NOTE: THIS COMMAND IS SUPPOSED TO BE EXECUTED IN COMMAND LINE SHELL, NOT IN PYTHON!\nparamScan.sh - i < cc3d\nproject - file > --maxNumberOfRuns = 20[remaining\ncommand\nline\noptions\nused in compucell3d.sh or runScript.sh]\n\n", "description": "2. Run Parameter Scan With No GUI (Linux)"}, "CC3D: 3. Run Parameter Scan Using Player (OSX)": {"prefix": "3. Run Parameter Scan Using Player (OSX)", "body": "# NOTE: THIS COMMAND IS SUPPOSED TO BE EXECUTED IN COMMAND LINE SHELL, NOT IN PYTHON!\nparamScan.command - i < cc3d\nproject - file > --guiScan - -maxNumberOfRuns = 20[remaining\ncommand\nline\noptions\nused in compucell3d.command or runScript.command]\n\n", "description": "3. Run Parameter Scan Using Player (OSX)"}, "CC3D: 3. Run Parameter Scan With No GUI (OSX)": {"prefix": "3. Run Parameter Scan With No GUI (OSX)", "body": "# NOTE: THIS COMMAND IS SUPPOSED TO BE EXECUTED IN COMMAND LINE SHELL, NOT IN PYTHON!\nparamScan.command - i < cc3d\nproject - file > --maxNumberOfRuns = 20[remaining\ncommand\nline\noptions\nused in compucell3d.command or runScript.command]\n\n", "description": "3. Run Parameter Scan With No GUI (OSX)"}, "CC3D: Current Parameter Scan Iteration": {"prefix": "Current Parameter Scan Iteration", "body": "# accessing current parameter scan iteration from steppable\niteration = self.param_scan_iteration\n", "description": "Current Parameter Scan Iteration"}, "CC3D: Fetch Steppable By Class Name": {"prefix": "Fetch Steppable By Class Name", "body": "self.getSteppableByClassName('STEPPABLE_CLASS_NAME')\n\n", "description": "Fetch Steppable By Class Name"}, "CC3D: Get Dir Of Current File": {"prefix": "Get Dir Of Current File", "body": "fileDir = os.path.dirname(os.path.abspath(__file__))\n\n", "description": "Get Dir Of Current File"}, "CC3D: Get FullPath Of Current File": {"prefix": "Get FullPath Of Current File", "body": "filePath = os.path.abspath(__file__)\n\n", "description": "Get FullPath Of Current File"}, "CC3D: Import os": {"prefix": "Import os", "body": "import os\n\n", "description": "Import os"}, "CC3D: Open File In Parameter Scan Main  Output Directory": {"prefix": "Open File In Parameter Scan Main  Output Directory", "body": "file_obj, file_path = self.open_file_in_parameter_scan_main_output_folder(\"<FILE_NAME>\", mode='w')\nif file_obj is None:\n    return\n\n", "description": "Open File In Parameter Scan Main  Output Directory"}, "CC3D: Open File In Simulation Output Directory": {"prefix": "Open File In Simulation Output Directory", "body": "file_obj, file_path = self.open_file_in_simulation_output_folder(\"<FILE_NAME>\", mode='w')\nif file_obj is None:\n    return\n\n", "description": "Open File In Simulation Output Directory"}, "CC3D: Open File In Simulation Output Directory (low-level)": {"prefix": "Open File In Simulation Output Directory (low-level)", "body": "from pathlib import Path\n\nif self.output_dir is not None:\n    output_path = Path(self.output_dir).joinpath(\"<FILE_NAME>\")\n    # create folder to store data\n    output_path.parent.mkdir(parents=True, exist_ok=True)\n    try:\n        file_handle = open(output_path, 'w')\n    except IOError:\n        print (\"Could not open file for writing.\")\n        return\n\n", "description": "Open File In Simulation Output Directory (low-level)"}, "CC3D: Set Simulation Output Directory (main Python script)": {"prefix": "Set Simulation Output Directory (main Python script)", "body": "# It is best to call this function from __init__ of first registered steppable\nself.set_output_dir(output_dir=\"<CUSTOM_OUTPUT_DIR>\", abs_path=False)\n\n", "description": "Set Simulation Output Directory (main Python script)"}, "CC3D: Get a diffusivity field": {"prefix": "Get a diffusivity field", "body": "# Fetch the diffusivity field for a field named \"MyField\"\n# Requires diffusivity field in medium or everywhere\nmy_field_diff = self.field.MyFieldDiff\n\n", "description": "Get a diffusivity field"}, "CC3D: Get solver": {"prefix": "Get solver", "body": "# Reference to the reaction diffusion finite volume solver, or None if the solver is not loaded\nrd_fvm = self.reaction_diffusion_solver_fvm\n\n", "description": "Get solver"}, "CC3D: Get/set cell diffusivity": {"prefix": "Get/set cell diffusivity", "body": "# Requires diffusivity by type\nfield_name = 'MyField'  # Name of the field\ncell_diff = self.reaction_diffusion_solver_fvm.getCellDiffusivityCoefficient(cell, field_name)\nself.reaction_diffusion_solver_fvm.setCellDiffusivityCoefficient(cell, field_name, 2 * cell_diff)\n\n", "description": "Get/set cell diffusivity"}, "CC3D: Get/set cell permeation coefficients": {"prefix": "Get/set cell permeation coefficients", "body": "rd_fvm = self.reaction_diffusion_solver_fvm\nfield_name = 'MyField'  # Name of the field\n# Get/set for a pair of cell and cell type\nperm_cf, cell_bias = rd_fvm.getPermeableCoefficients(cell, ncell.type, field_name)\nrd_fvm.setCellPermeationCoefficient(cell, ncell.type, field_name, 2 * perm_cf)\nrd_fvm.setCellPermeableBiasCoefficient(cell, ncell.type, field_name, 3 * cell_bias)\n# Get/set for a pair of cell and cell\nperm_cf, cell_bias, ncell_bias = rd_fvm.getPermeableCoefficients(cell, ncell, field_name)\nrd_fvm.setCellPermeationCoefficient(cell, ncell.type, field_name, 2 * perm_cf)\nrd_fvm.setCellPermeableBiasCoefficient(cell, ncell.type, field_name, 3 * cell_bias)\nrd_fvm.setCellPermeableBiasCoefficient(ncell, cell.type, field_name, 4 * ncell_bias)\n\n\n", "description": "Get/set cell permeation coefficients"}, "CC3D: Set a fixed concentration in a volume": {"prefix": "Set a fixed concentration in a volume", "body": "field_name = 'MyField'  # Name of the field\nconc_val = 1.0  # Volume concentration value\nloc = CompuCell.Point3D(1, 2, 3)  # Coordinates of volume\nself.reaction_diffusion_solver_fvm.useFixedFVConcentration(field_name, conc_val, loc)\n\n", "description": "Set a fixed concentration in a volume"}, "CC3D: Set a fixed concentration on a volume surface": {"prefix": "Set a fixed concentration on a volume surface", "body": "field_name = 'MyField'              # Name of the field\nsurface_name = 'MaxX'               # or MinY, MaxZ, etc.\nconc_val = 0.1                      # Surface concentration value\nloc = CompuCell.Point3D(1, 2, 3)    # Coordinates of volume\nself.reaction_diffusion_solver_fvm.useFixedConcentration(field_name, surface_name, conc_val, loc)\n\n", "description": "Set a fixed concentration on a volume surface"}, "CC3D: Set a fixed flux on a volume surface": {"prefix": "Set a fixed flux on a volume surface", "body": "field_name = 'MyField'              # Name of the field\nsurface_name = 'MaxX'               # or MinY, MaxZ, etc.\nflux_val = 0.1                      # Outward flux value\nloc = CompuCell.Point3D(1, 2, 3)    # Coordinates of volume\nself.reaction_diffusion_solver_fvm.useFixedFluxSurface(field_name, surface_name, flux_val, loc)\n\n", "description": "Set a fixed flux on a volume surface"}, "CC3D: Set diffusive transport on a volume surface": {"prefix": "Set diffusive transport on a volume surface", "body": "field_name = 'MyField'              # Name of the field\nsurface_name = 'MaxX'               # or MinY, MaxZ, etc.\nloc = CompuCell.Point3D(1, 2, 3)    # Coordinates of volume\nself.reaction_diffusion_solver_fvm.useDiffusiveSurface(field_name, surface_name, loc)  # On a surface\nself.reaction_diffusion_solver_fvm.useDiffusiveSurfaces(field_name, loc)               # On all surfaces\n\n", "description": "Set diffusive transport on a volume surface"}, "CC3D: Set permeable membrane transport on a volume surface": {"prefix": "Set permeable membrane transport on a volume surface", "body": "field_name = 'MyField'              # Name of the field\nsurface_name = 'MaxX'               # or MinY, MaxZ, etc.\nloc = CompuCell.Point3D(1, 2, 3)    # Coordinates of volume\nself.reaction_diffusion_solver_fvm.usePermeableSurface(field_name, surface_name, loc)  # On a surface\nself.reaction_diffusion_solver_fvm.usePermeableSurfaces(field_name, loc)               # On all surfaces\n\n", "description": "Set permeable membrane transport on a volume surface"}, "CC3D: 1. Model Initial Data": {"prefix": "1. Model Initial Data", "body": "# this can be e.g. partial path 'Simulation/osci.sbml'\nmodel_file = 'PATH_TO_SBML_MODEL'\n\ninitial_conditions = {}\ninitial_conditions['SPECIES_NAME1'] = species_val1\ninitial_conditions['SPECIES_NAME2'] = species_val2\n\nstep_size = 0.5\n\n", "description": "1. Model Initial Data"}, "CC3D: 2. Add Antimony model to cell ids": {"prefix": "2. Add Antimony model to cell ids", "body": "# Input Antimony model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# Initial conditions can be declared in model or with initial_conditions; the latter takes precedence\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\n# Model is translated to SBML and stored in memory; use SBML functions in subsequent operations\nself.add_antimony_to_cell_ids(model_file=model_file, model_string=model_string, model_name='MODEL_NAME', cell_ids=[1, 3, 7], step_size=step_size,\n                          initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add Antimony model to cell ids"}, "CC3D: 2. Add Antimony model to cell types": {"prefix": "2. Add Antimony model to cell types", "body": "# Input Antimony model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# Initial conditions can be declared in model or with initial_conditions; the latter takes precedence\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\n# Model is translated to SBML and stored in memory; use SBML functions in subsequent operations\nself.add_antimony_to_cell_types(model_file=model_file, model_string=model_string, model_name='MODEL_NAME', cell_types=[self.CELLTYPENAME1, self.CELLTYPENAME1],\n                        step_size=step_size, initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add Antimony model to cell types"}, "CC3D: 2. Add Antimony model to individual cell": {"prefix": "2. Add Antimony model to individual cell", "body": "# Input Antimony model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# Initial conditions can be declared in model or with initial_conditions; the latter takes precedence\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\n# Model is translated to SBML and stored in memory; use SBML functions in subsequent operations\ncell_20 = self.fetch_cell_by_id(20)\n\nif cell_20:\n    self.add_antimony_to_cell(model_file=model_file, model_string=model_string, model_name='MODEL_NAME', cell=cell_20,step_size=step_size,\n                          initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add Antimony model to individual cell"}, "CC3D: 2. Add CellML model to cell ids": {"prefix": "2. Add CellML model to cell ids", "body": "# Input CellML model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# Initial conditions can be declared in model or with initial_conditions; the latter takes precedence\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\n# Model is translated to SBML and stored in memory; use SBML functions in subsequent operations\nself.add_cellml_to_cell_ids(model_file=model_file, model_string=model_string, model_name='MODEL_NAME', cell_ids=[1, 3, 7], step_size=step_size,\n                          initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add CellML model to cell ids"}, "CC3D: 2. Add CellML model to cell types": {"prefix": "2. Add CellML model to cell types", "body": "# Input CellML model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# Initial conditions can be declared in model or with initial_conditions; the latter takes precedence\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\n# Model is translated to SBML and stored in memory; use SBML functions in subsequent operations\nself.add_cellml_to_cell_types(model_file=model_file, model_string=model_string, model_name='MODEL_NAME', cell_types=[self.CELLTYPENAME1, self.CELLTYPENAME1],\n                        step_size=step_size, initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add CellML model to cell types"}, "CC3D: 2. Add CellML model to individual cell": {"prefix": "2. Add CellML model to individual cell", "body": "# Input CellML model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# Initial conditions can be declared in model or with initial_conditions; the latter takes precedence\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\n# Model is translated to SBML and stored in memory; use SBML functions in subsequent operations\ncell_20 = self.fetch_cell_by_id(20)\n\nif cell_20:\n    self.add_cellml_to_cell(model_file=model_file, model_string=model_string, model_name='MODEL_NAME', cell=cell_20,step_size=step_size,\n                          initial_conditions=initial_conditions, integrator=integrator)\n\n\n", "description": "2. Add CellML model to individual cell"}, "CC3D: 2. Add SBML model to cell ids": {"prefix": "2. Add SBML model to cell ids", "body": "# Input SBML model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\nself.add_sbml_to_cell_ids(model_file=model_file, model_string=model_string, model_name='MODEL_NAME', cell_ids=[1, 3, 7], step_size=step_size,\n                          initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add SBML model to cell ids"}, "CC3D: 2. Add SBML model to cell types": {"prefix": "2. Add SBML model to cell types", "body": "# Input SBML model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\nself.add_sbml_to_cell_types(model_file=model_file, model_string=model_string, model_name='MODEL_NAME', cell_types=[self.CELLTYPENAME1, self.CELLTYPENAME1],\n                        step_size=step_size, initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add SBML model to cell types"}, "CC3D: 2. Add SBML model to individual cell": {"prefix": "2. Add SBML model to individual cell", "body": "# Input SBML model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\ncell_20 = self.fetch_cell_by_id(20)\n\nif cell_20:\n    self.add_sbml_to_cell(model_file=model_file, model_string=model_string, model_name='MODEL_NAME', cell=cell_20,step_size=step_size,\n                          initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add SBML model to individual cell"}, "CC3D: 2. Add free floating Antimony model": {"prefix": "2. Add free floating Antimony model", "body": "# Input Antimony model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# Initial conditions can be declared in model or with initial_conditions; the latter takes precedence\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\n# Model is translated to SBML and stored in memory; use SBML functions in subsequent operations\nself.add_free_floating_antimony(model_file=model_file, model_string=model_string, model_name='UNIQUE_MODEL_NAME', step_size=step_size,\n                            initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add free floating Antimony model"}, "CC3D: 2. Add free floating CellML model": {"prefix": "2. Add free floating CellML model", "body": "# Input CellML model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\nself.add_free_floating_cellml(model_file=model_file, model_string=model_string, model_name='UNIQUE_MODEL_NAME', step_size=step_size,\n                            initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add free floating CellML model"}, "CC3D: 2. Add free floating SBML model e.g. PBPK": {"prefix": "2. Add free floating SBML model e.g. PBPK", "body": "# Input SBML model in file 'model_file' or string 'model_string'\n# If using model_string, enclose entire model in a set of triple quotations\n# Initial conditions can be declared in model or with initial_conditions; the latter takes precedence\n# An integrator can be selected from CVODE: (default, pass nothing), Gillespie: (integrator='gillespie'),\n#   Euler: (integrator='euler'), Runge-Kutta: (integrator='rk4'), and Gillespie Direct Method: (integrator='rk45')\nself.add_free_floating_sbml(model_file=model_file, model_string=model_string, model_name='UNIQUE_MODEL_NAME', step_size=step_size,\n                            initial_conditions=initial_conditions, integrator=integrator)\n\n", "description": "2. Add free floating SBML model e.g. PBPK"}, "CC3D: 3. Timestep SBML models": {"prefix": "3. Timestep SBML models", "body": "self.timestep_sbml()\n\n", "description": "3. Timestep SBML models"}, "CC3D: 5. Copy All SBMLs": {"prefix": "5. Copy All SBMLs", "body": "self.copy_sbml_simulators(from_cell=source_cell, to_cell=target_cell)\n\n", "description": "5. Copy All SBMLs"}, "CC3D: 5. Copy select SBMLs": {"prefix": "5. Copy select SBMLs", "body": "self.copy_sbml_simulators(from_cell=source_cell, to_cell=target_cell, sbml_names=['MODEL_NAME1', 'MODEL_NAME2'])\n\n", "description": "5. Copy select SBMLs"}, "CC3D: Delete Free Floating SBML": {"prefix": "Delete Free Floating SBML", "body": "self.delete_free_floating_sbml(model_name='UNIQUE_MODEL_NAME')\n\n", "description": "Delete Free Floating SBML"}, "CC3D: Delete SBML from cell ids": {"prefix": "Delete SBML from cell ids", "body": "self.delete_sbml_from_cell_ids(model_name='MODEL_NAME', cell_ids=[1, 4, 7])\n\n", "description": "Delete SBML from cell ids"}, "CC3D: Delete SBML from cell types": {"prefix": "Delete SBML from cell types", "body": "self.delete_sbml_from_cell_types(model_name='MODEL_NAME', cell_types=[self.CELLTYPE1, self.CELLTYPE2])\n\n", "description": "Delete SBML from cell types"}, "CC3D: Delete SBML from individual cell": {"prefix": "Delete SBML from individual cell", "body": "self.delete_sbml_from_cell(model_name='MODEL_NAME', cell=cell)\n\n", "description": "Delete SBML from individual cell"}, "CC3D: Get SBML Integrator  Global Options": {"prefix": "Get SBML Integrator  Global Options", "body": "# returns current options - can be None if no global options were set\noptions = self.get_sbml_global_options()\n\n", "description": "Get SBML Integrator  Global Options"}, "CC3D: Get SBML Simulator for Free Floating Model (advanced)": {"prefix": "Get SBML Simulator for Free Floating Model (advanced)", "body": "# example self.sbml._rr_DN\nself.sbml._rr_MODEL_NAME\n\n", "description": "Get SBML Simulator for Free Floating Model (advanced)"}, "CC3D: Get SBML Simulator for individual cell (advanced)": {"prefix": "Get SBML Simulator for individual cell (advanced)", "body": "# example cell.sbml._rr_DN\ncell.sbml._rr_MODEL_NAME\n\n", "description": "Get SBML Simulator for individual cell (advanced)"}, "CC3D: Get SBML State for Free Floating model": {"prefix": "Get SBML State for Free Floating model", "body": "state = self.sbml.UNIQUE_MODEL_NAME\n\n", "description": "Get SBML State for Free Floating model"}, "CC3D: Get SBML State for individual cell": {"prefix": "Get SBML State for individual cell", "body": "# returns dictionary of values\nstate = cell.sbml.MODELNAME\n\n\n", "description": "Get SBML State for individual cell"}, "CC3D: Get SBML Value for Free Floating model": {"prefix": "Get SBML Value for Free Floating model", "body": "# value name can be e.g. species name\nself.sbml.MODEL_NAME['VALUE_NAME']\n\n", "description": "Get SBML Value for Free Floating model"}, "CC3D: Get SBML Value for SBML in a specific cell": {"prefix": "Get SBML Value for SBML in a specific cell", "body": "# value name can be e.g. species name\n# example cell.DN.Delta\ncell.sbml.MODEL_NAME['VALUE_NAME']\n\n", "description": "Get SBML Value for SBML in a specific cell"}, "CC3D: Set SBML Integrator Global Options": {"prefix": "Set SBML Integrator Global Options", "body": "# adding options that setup SBML solver integrator - these are optional but useful when encountering\n# integration instabilities\n# relative is relative tolerance, absolute is absolute tolerance,\n# steps is the initial number of integration steps for each integration interval\n# (higher number does not result in slower simulation, quite to the contrary),\n# stiff set to true will use stiff ODE solver\noptions = {'relative': 1e-10, 'absolute': 1e-12, 'steps': 10, 'stiff': False}\nself.set_sbml_global_options(options)\n\n", "description": "Set SBML Integrator Global Options"}, "CC3D: Set SBML State for Free Floating model": {"prefix": "Set SBML State for Free Floating model", "body": "state = {}\nstate['REACTANT_NAME'] = 0.9\nself.set_sbml_state(model_name='MODELNAME',  state=state)\n\n", "description": "Set SBML State for Free Floating model"}, "CC3D: Set SBML State for individual cell": {"prefix": "Set SBML State for individual cell", "body": "state = {}\nstate['REACTANT_NAME'] = 0.9\n\nself.set_sbml_state(model_name='MODELNAME', cell=cell, state=state)\n\n", "description": "Set SBML State for individual cell"}, "CC3D: Set SBML Value for Free Floating model": {"prefix": "Set SBML Value for Free Floating model", "body": "# value name can be e.g. species name\nself.sbml.UNIQUE_MODEL_NAME['VALUE_NAME'] = 0.1\n\n", "description": "Set SBML Value for Free Floating model"}, "CC3D: Set SBML Value for SBML in a specific cell": {"prefix": "Set SBML Value for SBML in a specific cell", "body": "# value name can be e.g. species name\ncell.sbml.UNIQUE_MODEL_NAME['VALUE_NAME'] = 0.1\n\n", "description": "Set SBML Value for SBML in a specific cell"}, "CC3D: 1. Setup (start fcn)": {"prefix": "1. Setup (start fcn)", "body": "\nself.plot_win = self.add_new_plot_window(title='Average Volume And Surface',\n                                         x_axis_title='MonteCarlo Step (MCS)',\n                                         y_axis_title='Variables', x_scale_type='linear', y_scale_type='linear',\n                                         grid=False)\n\nself.plot_win.add_plot(\"MVol\", style='Lines', color='red', size=5)\nself.plot_win.add_plot(\"MSur\", style='Dots', color='green', size=1)\n\n\n", "description": "1. Setup (start fcn)"}, "CC3D: 2. Add Data Points (step fcn)": {"prefix": "2. Add Data Points (step fcn)", "body": "# arguments are (name of the data series, x, y)\nself.plot_win.add_data_point(\"MVol\", mcs, cell.volume)\nself.plot_win.add_data_point(\"MSur\", mcs, cell.surface)\n\n\n", "description": "2. Add Data Points (step fcn)"}, "CC3D: 3. Refresh Plots (unnecessary, deprecated - step fcn )": {"prefix": "3. Refresh Plots (unnecessary, deprecated - step fcn )", "body": "self.plot_win.show_all_plots()\n\n", "description": "3. Refresh Plots (unnecessary, deprecated - step fcn )"}, "CC3D: Erase Plot (step fcn)": {"prefix": "Erase Plot (step fcn)", "body": "self.plot_win.erase_all_data()\n\n", "description": "Erase Plot (step fcn)"}, "CC3D: Save Plot As A PNG File": {"prefix": "Save Plot As A PNG File", "body": "# here we specify size of the image saved (1000x1000) - default is 400 x 400\n# resizing of the image is not guaranteed to be implemented\nself.plot_win.save_plot_as_png(file_name, 1000, 1000)\n\n", "description": "Save Plot As A PNG File"}, "CC3D: Save Plot As Data (text file)": {"prefix": "Save Plot As Data (text file)", "body": "self.plot_win.save_plot_as_data(file_name)\n\n", "description": "Save Plot As Data (text file)"}, "CC3D: 1. Add Histogram Plot (start fcn)": {"prefix": "1. Add Histogram Plot (start fcn)", "body": "# initialize setting for Histogram\nself.plot_win = self.add_new_plot_window(title='Histogram of Cell Volumes', x_axis_title='Number of Cells',\n                                         y_axis_title='Volume Size in Pixels')\n# _alpha is transparency 0 is transparent, 255 is opaque\nself.plot_win.add_histogram_plot(plot_name='Hist 1', color='green', alpha=100)\nself.plot_win.add_histogram_plot(plot_name='Hist 2', color='red', alpha=100)\nself.plot_win.add_histogram_plot(plot_name='Hist 3', color='blue')\n\n", "description": "1. Add Histogram Plot (start fcn)"}, "CC3D: 2. Add Histogram  (step fcn)": {"prefix": "2. Add Histogram  (step fcn)", "body": "self.plot_win.add_histogram(plot_name='Hist 1', value_array=gauss, number_of_bins=10)\nself.plot_win.add_histogram(plot_name='Hist 2', value_array=vol_list, number_of_bins=10)\nself.plot_win.add_histogram(plot_name='Hist 3', value_array=vol_list, number_of_bins=50)\n\n\n", "description": "2. Add Histogram  (step fcn)"}, "CC3D: Save  Plot As A PNG File": {"prefix": "Save  Plot As A PNG File", "body": "# here we specify size of the image saved (1000x1000) - default is 400 x 400\n# resizing of the image is not guaranteed to be implemented\nself.plot_win.save_plot_as_png(file_name, 1000, 1000)\n\n", "description": "Save  Plot As A PNG File"}, "CC3D: Amount Seen by Cell": {"prefix": "Amount Seen by Cell", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\nsecretor = self.get_field_secretor(\"FIELDNAME\")\namount_seen = secretor.amountSeenByCell(cell)\n\n", "description": "Amount Seen by Cell"}, "CC3D: Secrete Inside Cell": {"prefix": "Secrete Inside Cell", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\nsecretor.secreteInsideCell(cell, 300)\n# tot_amount = secretor.secreteInsideCellTotalCount(cell, 300).tot_amount\n\n", "description": "Secrete Inside Cell"}, "CC3D: Secrete Inside Cell At Boundary": {"prefix": "Secrete Inside Cell At Boundary", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\nsecretor.secreteInsideCellAtBoundary(cell, 300)\n# tot_amount = secretor.secreteInsideCellAtBoundaryTotalCount(cell, 300).tot_amount\n\n", "description": "Secrete Inside Cell At Boundary"}, "CC3D: Secrete Inside Cell At Boundary On Contact With": {"prefix": "Secrete Inside Cell At Boundary On Contact With", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\n\n# arguments are: cell, secretion rate, a list of cell types\nsecretor.secreteInsideCellAtBoundaryOnContactWith(cell, 300, [self.TYPE1, self.TYPE2])\n# tot_amount = secretor.secreteInsideCellAtBoundaryOnContactWithTotalCount(cell, 300, [self.TYPE1, self.TYPE2]).tot_amount\n\n", "description": "Secrete Inside Cell At Boundary On Contact With"}, "CC3D: Secrete Inside Cell At COM": {"prefix": "Secrete Inside Cell At COM", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\nsecretor.secreteInsideCellAtCOM(cell, 300)\n# tot_amount = secretor.secreteInsideCellAtCOMTotalCount(cell, 300).tot_amount\n\n", "description": "Secrete Inside Cell At COM"}, "CC3D: Secrete Inside Cell Constant Concentration": {"prefix": "Secrete Inside Cell Constant Concentration", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\nsecretor.secreteInsideCellConstantConcentration(cell, 300)\n# tot_amount = secretor.secreteInsideCellConstantConcentrationTotalCount(cell, 300).tot_amount\n\n", "description": "Secrete Inside Cell Constant Concentration"}, "CC3D: Secrete Outside Cell At Boundary": {"prefix": "Secrete Outside Cell At Boundary", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\nsecretor.secreteOutsideCellAtBoundary(cell, 300)\n# tot_amount = secretor.secreteOutsideCellAtBoundaryTotalCount(cell, 300).tot_amount\n\n", "description": "Secrete Outside Cell At Boundary"}, "CC3D: Secrete Outside Cell At Boundary On Contact With": {"prefix": "Secrete Outside Cell At Boundary On Contact With", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\n\n# arguments are: cell, secretion rate, a list of cell types\nsecretor.secreteOutsideCellAtBoundaryOnContactWith(cell, 300, [self.TYPE1, self.TYPE2])\n# tot_amount = secretor.secreteOutsideCellAtBoundaryOnContactWithTotalCount(cell, 300, [self.TYPE1, self.TYPE2]).tot_amount\n\n", "description": "Secrete Outside Cell At Boundary On Contact With"}, "CC3D: Total Amount": {"prefix": "Total Amount", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\nsecretor = self.get_field_secretor(\"FIELDNAME\")\ntotal_amount = secretor.totalFieldIntegral()\n\n", "description": "Total Amount"}, "CC3D: Uptake Inside Cell": {"prefix": "Uptake Inside Cell", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\n\n# arguments are: cell, max uptake, relative uptake\nsecretor.uptakeInsideCell(cell, 2.0, 0.2)\n# tot_amount = secretor.uptakeInsideCellTotalCount(cell, 2.0, 0.2).tot_amount\n\n", "description": "Uptake Inside Cell"}, "CC3D: Uptake Inside Cell At Boundary": {"prefix": "Uptake Inside Cell At Boundary", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\n\n# arguments are: cell, max uptake, relative uptake\nsecretor.uptakeInsideCellAtBoundary(cell, 2.0, 0.2)\n# tot_amount = secretor.uptakeInsideCellAtBoundaryTotalCount(cell, 2.0, 0.2).tot_amount\n\n", "description": "Uptake Inside Cell At Boundary"}, "CC3D: Uptake Inside Cell At Boundary and On Contact With": {"prefix": "Uptake Inside Cell At Boundary and On Contact With", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\n\n# arguments are: cell, max uptake, relative uptake, a list of cell types\nsecretor.uptakeInsideCellAtBoundaryOnContactWith(cell, 2.0, 0.2, [self.TYPE1, TYPE2])\n# tot_amount = secretor.uptakeInsideCellAtBoundaryOnContactWithTotalCount(cell, 2.0, 0.2, [self.TYPE1, TYPE2]).tot_amount\n\n", "description": "Uptake Inside Cell At Boundary and On Contact With"}, "CC3D: Uptake Inside Cell At COM": {"prefix": "Uptake Inside Cell At COM", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\n\n# arguments are: cell, max uptake, relative uptake\nsecretor.uptakeInsideCellAtCOM(cell, 2.0, 0.2)\n# tot_amount = secretor.uptakeInsideCellAtCOMTotalCount(cell, 2.0, 0.2).tot_amount\n\n", "description": "Uptake Inside Cell At COM"}, "CC3D: Uptake Outside Cell At Boundary": {"prefix": "Uptake Outside Cell At Boundary", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\n\n# arguments are: cell, max uptake, relative uptake\nsecretor.uptakeOutsideCellAtBoundary(cell, 2.0, 0.2)\n# tot_amount = secretor.uptakeOutsideCellAtBoundaryTotalCount(cell, 2.0, 0.2).tot_amount\n\n", "description": "Uptake Outside Cell At Boundary"}, "CC3D: Uptake Outside Cell At Boundary and On Contact With": {"prefix": "Uptake Outside Cell At Boundary and On Contact With", "body": "# Make sure Secretion plugin is loaded\n# make sure this field is defined in one of the PDE solvers\n# you may reuse secretor for many cells. Simply define it outside the loop\nsecretor = self.get_field_secretor(\"FIELDNAME\")\n\n# arguments are: cell, max uptake, relative uptake, a list of cell types\nsecretor.uptakeOutsideCellAtBoundaryOnContactWith(cell, 2.0, 0.2, [self.TYPE1, TYPE2])\n# tot_amount = secretor.uptakeOutsideCellAtBoundaryOnContactWithTotalCount(cell, 2.0, 0.2, [self.TYPE1, TYPE2]).tot_amount\n\n", "description": "Uptake Outside Cell At Boundary and On Contact With"}, "CC3D: Build Wall": {"prefix": "Build Wall", "body": "self.build_wall(self.YOUR_WALL_CELL_TYPE)\n\n", "description": "Build Wall"}, "CC3D: Change Number of CPU's (worknodes)": {"prefix": "Change Number of CPU's (worknodes)", "body": "self.change_number_of_work_nodes(8)\n\n", "description": "Change Number of CPU's (worknodes)"}, "CC3D: Change Steppable Frequency": {"prefix": "Change Steppable Frequency", "body": "self.frequency = NEW_FREQUENCY\n\n", "description": "Change Steppable Frequency"}, "CC3D: Destroy Wall": {"prefix": "Destroy Wall", "body": "self.destroy_wall()\n\n", "description": "Destroy Wall"}, "CC3D: Get Lattice Dimensions": {"prefix": "Get Lattice Dimensions", "body": "dim_x = self.dim.x  # Lattice dimension along x (first dimension)\ndim_y = self.dim.y  # Lattice dimension along y (second dimension)\ndim_z = self.dim.z  # Lattice dimension along z (third dimension)\n\n", "description": "Get Lattice Dimensions"}, "CC3D: Resize And Shift Lattice": {"prefix": "Resize And Shift Lattice", "body": "self.resize_and_shift_lattice(new_size=(X, Y, Z), shift_vec=(VX, VY, VZ))\n\n", "description": "Resize And Shift Lattice"}, "CC3D: Set Max MCS": {"prefix": "Set Max MCS", "body": "self.set_max_mcs(MAX_MCS)\n\n", "description": "Set Max MCS"}, "CC3D: Shared steppable dictionary": {"prefix": "Shared steppable dictionary", "body": "# This dictionary is shared by all registered steppables\nself.shared_steppable_vars['key']\n\n", "description": "Shared steppable dictionary"}, "CC3D: Stop Simulation": {"prefix": "Stop Simulation", "body": "self.stop_simulation()\n\n", "description": "Stop Simulation"}, "CC3D: 1.Set Up Steering Panel": {"prefix": "1.Set Up Steering Panel", "body": "\n\ndef add_steering_panel(self):\n    self.add_steering_param(name='MY_PARAM_SLIDER', val=20, min_val=0, max_val=100,\n                            decimal_precision=2, widget_name='slider')\n    self.add_steering_param(name='MY_PARAM_COMBO', val=20, enum=[10,20,30,40,50,60,70,80,90,100],\n                                widget_name='combobox')\n\ndef process_steering_panel_data(self):\n    print ('processing steering panel updates')\n    print ('all dirty flag=', self.steering_param_dirty())\n    param_slider = self.get_steering_param('MY_PARAM_SLIDER')\n    param_combo = self.get_steering_param('MY_PARAM_COMBO')\n    print ('updated MY_PARAM_SLIDER=',param_slider)\n    print ('updated MY_PARAM_COMBO=', param_combo)\n\n    # IMPORTANT: you may add code here tht updates cell properties based on the\n    # values of the parameters from the steering panel. For example:\n\n    # for cell in self.cellList:\n    #     cell.targetVolume = param_slider\n    #     cell.lambdaVolume = param_combo\n\n", "description": "1.Set Up Steering Panel"}, "CC3D: Check if Steering Panel Was Updated": {"prefix": "Check if Steering Panel Was Updated", "body": "updated_flag = self.steering_param_dirty()\n\n", "description": "Check if Steering Panel Was Updated"}, "CC3D: Get Updated Value of Steering Parameter": {"prefix": "Get Updated Value of Steering Parameter", "body": "my_param = self.get_steering_param('MY_PARAM')\n\n", "description": "Get Updated Value of Steering Parameter"}, "CC3D: All Cells": {"prefix": "All Cells", "body": "CellInventory::cellInventoryIterator cInvItr;\nCellG * cell=0;\n// std::set<NeighborSurfaceData > * neighborData;\n\nfor(cInvItr=cellInventoryPtr->cellInventoryBegin() ; cInvItr !=cellInventoryPtr->cellInventoryEnd() ;++cInvItr )\n{\n    cell=cellInventoryPtr->getCell(cInvItr);\n    //Put your code here\n    cerr<<\"cell id=\"<<cell->id<<endl;\n}\n\n", "description": "All Cells"}, "CC3D: Compartments of a Cluster": {"prefix": "Compartments of a Cluster", "body": "CC3DCellList compartments = potts->getCellInventory().getClusterInventory().getClusterCells(CELL->clusterId);\nfor (int i =0 ; i< compartments.size() ; ++i){\n    cerr<<\"compartment id=\"<<compartments[i]->id<<endl; \n}\n\n", "description": "Compartments of a Cluster"}, "CC3D: Pixel Neighbors": {"prefix": "Pixel Neighbors", "body": "int maxNeighborIndexLocal=boundaryStrategy->getMaxNeighborIndexFromNeighborOrder(neighborOrder); // this line usually sits in the init or extra init function\nNeighbor neighbor;\nCellG * nCell;\nWatchableField3D<CellG *> *fieldG =(WatchableField3D<CellG *> *) potts->getCellFieldG(); // you may store WatchableField3D<CellG *> *fieldG as a class member\n\nPoint3D px;\n\nfor(unsigned int nIdx=0 ; nIdx <= maxNeighborIndexLocal ; ++nIdx ){\n    neighbor=boundaryStrategy->getNeighborDirect(const_cast<Point3D&>(px),nIdx);\n    if(!neighbor.distance){\n        //if distance is 0 then the neighbor returned is invalid\n        continue;\n    }\n    nCell=fieldG->get(neighbor.pt);\n\n    if (!nCell) {\n        cerr<<\"neighbor pixel cell id=\"<<nCell->id<<endl;\n    }\n        \n}\n\n\n", "description": "Pixel Neighbors"}, "CC3D: Find Attribute": {"prefix": "Find Attribute", "body": "bool flag=_xmlData->findAttribute(\"ATTR_NAME\");\n\n", "description": "Find Attribute"}, "CC3D: Find Element": {"prefix": "Find Element", "body": "bool flag=_xmlData->findElement(\"ELEMENT_NAME\");\n\n", "description": "Find Element"}, "CC3D: Get Attribute As Bool": {"prefix": "Get Attribute As Bool", "body": "bool val=_xmlData->getAttributeAsBool(\"ATTR_NAME\");\n\n", "description": "Get Attribute As Bool"}, "CC3D: Get Attribute As Double": {"prefix": "Get Attribute As Double", "body": "double val=_xmlData->getAttributeAsDouble(\"ATTR_NAME\");\n\n", "description": "Get Attribute As Double"}, "CC3D: Get Attribute As Int": {"prefix": "Get Attribute As Int", "body": "int val=_xmlData->getAttributeAsInt(\"ATTR_NAME\");\n\n", "description": "Get Attribute As Int"}, "CC3D: Get Attribute As Short": {"prefix": "Get Attribute As Short", "body": "short val=_xmlData->getAttributeAsShort(\"ATTR_NAME\");\n\n", "description": "Get Attribute As Short"}, "CC3D: Get Attribute As Text": {"prefix": "Get Attribute As Text", "body": "std::string val=_xmlData->getAttribute(\"ATTR_NAME\");\n\n", "description": "Get Attribute As Text"}, "CC3D: Get Attribute As UInt": {"prefix": "Get Attribute As UInt", "body": "unsigned int val=_xmlData->getAttributeAsUInt(\"ATTR_NAME\");\n\n", "description": "Get Attribute As UInt"}, "CC3D: Get Attribute As UShort": {"prefix": "Get Attribute As UShort", "body": "unsigned short val=_xmlData->getAttributeAsUShort(\"ATTR_NAME\");\n\n", "description": "Get Attribute As UShort"}, "CC3D: Get Element": {"prefix": "Get Element", "body": "CC3DXMLElement *elem=_xmlData->getFirstElement(\"ELEMENT_NAME\");\n\n", "description": "Get Element"}, "CC3D: Get Element As Bool": {"prefix": "Get Element As Bool", "body": "bool val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getBool();\n\n", "description": "Get Element As Bool"}, "CC3D: Get Element As Double": {"prefix": "Get Element As Double", "body": "double val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getDouble();\n\n", "description": "Get Element As Double"}, "CC3D: Get Element As Int": {"prefix": "Get Element As Int", "body": "int val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getInt();\n\n", "description": "Get Element As Int"}, "CC3D: Get Element As Short": {"prefix": "Get Element As Short", "body": "short val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getShort();\n\n", "description": "Get Element As Short"}, "CC3D: Get Element As Text": {"prefix": "Get Element As Text", "body": "std::string val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getText();\n\n", "description": "Get Element As Text"}, "CC3D: Get Element As UInt": {"prefix": "Get Element As UInt", "body": "unsigned int val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getUInt();\n\n", "description": "Get Element As UInt"}, "CC3D: Get Element As UShort": {"prefix": "Get Element As UShort", "body": "unsigned short val=_xmlData->getFirstElement(\"ELEMENT_NAME\")->getUShort();\n\n", "description": "Get Element As UShort"}, "CC3D: Process List of Elements": {"prefix": "Process List of Elements", "body": "CC3DXMLElementList elemVec=_xmlData->getElements(\"ELEMENT_NAME\");\nfor (int i = 0 ; i<elemVec.size(); ++i){\n    //Put your code here\n}\n\n\n\n", "description": "Process List of Elements"}}